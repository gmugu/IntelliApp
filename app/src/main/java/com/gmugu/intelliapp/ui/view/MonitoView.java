package com.gmugu.intelliapp.ui.view;import java.nio.ByteBuffer;import android.app.ProgressDialog;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.Canvas;import android.graphics.Rect;import android.util.AttributeSet;import android.util.Log;import android.view.View;import android.view.WindowManager;import android.widget.Toast;import com.gmugu.intelliapp.data.ApiModule;import com.gmugu.intelliapp.data.ILockApi;import okhttp3.ResponseBody;import rx.Observable;import rx.Subscriber;import rx.android.schedulers.AndroidSchedulers;import rx.schedulers.Schedulers;public class MonitoView extends View {    public static final String TAG = MonitoView.class.getSimpleName();    private final int width = 320;    private final int height = 240;    private byte[] mPixel = new byte[width * height * 2];    private ByteBuffer buffer_temp = ByteBuffer.wrap(mPixel);    private Bitmap videoBitmap = Bitmap.createBitmap(width, height,            Config.RGB_565);    private Rect srcrect = new Rect(0, 0, width, height);    private Rect desrect;    private ILockApi lockApi = ApiModule.provideLockApi();    private Context context;    private int displayWidth;    private int displayHeight;    private boolean isUpdating = false;    public MonitoView(Context context) {        super(context);        init(context);    }    public MonitoView(Context context, AttributeSet attributeSet) {        super(context, attributeSet);        init(context);    }    private void init(Context context) {        this.context = context;        WindowManager wm = (WindowManager) context                .getSystemService(Context.WINDOW_SERVICE);        displayWidth = wm.getDefaultDisplay().getWidth();        displayHeight = wm.getDefaultDisplay().getHeight();        desrect = new Rect(0, 0, displayWidth, displayWidth * 3 / 4);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        setMeasuredDimension(displayWidth, displayWidth * 3 / 4);    }    @Override    protected void onDraw(Canvas canvas) {        videoBitmap.copyPixelsFromBuffer(buffer_temp);        buffer_temp.position(0);        canvas.drawBitmap(videoBitmap, srcrect, desrect, null);    }    public void recycleBitmap() {        if (videoBitmap != null && !videoBitmap.isRecycled()) {            videoBitmap.recycle();        }    }    public void updataView() {        if (isUpdating) {            Log.d(TAG, "Updating!");            return;        }        Observable<ResponseBody> visitorImg = lockApi.getVisitorImg();        final ProgressDialog progressDialog = new ProgressDialog(context);        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setTitle("正在刷新");        progressDialog.setIndeterminate(false);        progressDialog.setCanceledOnTouchOutside(false);        progressDialog.show();        isUpdating = true;        visitorImg.subscribeOn(Schedulers.newThread())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Subscriber<ResponseBody>() {                    @Override                    public void onCompleted() {                        Log.d(TAG, "visitor img update success!");                        progressDialog.cancel();                        isUpdating = false;                    }                    @Override                    public void onError(Throwable e) {                        e.printStackTrace();                        Toast.makeText(context, "连接失败", Toast.LENGTH_SHORT).show();                        progressDialog.cancel();                        isUpdating = false;                    }                    @Override                    public void onNext(ResponseBody responseBody) {                        try {                            byte[] data = responseBody.bytes();                            System.arraycopy(data, 0, mPixel, 0, data.length);                            postInvalidate();                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                });    }}